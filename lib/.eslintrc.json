{
	"root": true,
	"ignorePatterns": ["projects/**/*", "polyfills.ts", "src/assets/js/**/*"],
	"overrides": [
		{
			"files": ["*.ts"],
			"parserOptions": {
				"project": ["tsconfig.json"],
				"createDefaultProgram": true
			},
			"extends": [
				"eslint:recommended",
				"plugin:@typescript-eslint/recommended",
				"plugin:@typescript-eslint/recommended-requiring-type-checking",
				"plugin:@angular-eslint/recommended",
				"plugin:@angular-eslint/template/process-inline-templates"
			],
			"rules": {
				"comma-dangle": [
					"error",
					{
						"arrays": "always-multiline",
						"objects": "always-multiline",
						"imports": "always-multiline",
						"exports": "always-multiline",
						"functions": "never"
					}
				],
				"max-len": [
					"error",
					{
						"ignorePattern": "^import [^,]+ from |^export | implements |\\}\\s+from",
						"code": 120
					}
				],
				"@angular-eslint/component-class-suffix": [
					"error",
					{
						"suffixes": ["Component", "Container"]
					}
				],
				"@typescript-eslint/explicit-member-accessibility": "off",
				"@angular-eslint/use-lifecycle-interface": "error",
				"@typescript-eslint/array-type": [
					"error",
					{
						"default": "array"
					}
				],
				"@typescript-eslint/consistent-type-assertions": [
					"error",
					{
						"assertionStyle": "as",
						"objectLiteralTypeAssertions": "allow-as-parameter"
					}
				],
				"@typescript-eslint/dot-notation": "error",
				"@typescript-eslint/indent": "off",
				"@typescript-eslint/no-unsafe-assignment": "off",
				"@typescript-eslint/member-delimiter-style": ["error"],
				"@typescript-eslint/member-ordering": [
					"error",
					{
						"default": [
							"signature",
							"decorated-field",
							"field",
							"constructor",
							"decorated-method",
							"static-method",
							"instance-method",
							"abstract-method",
							"method"
						]
					}
				],
				"@typescript-eslint/naming-convention": [
					"error",
					{
						"selector": "objectLiteralProperty",
						"format": ["UPPER_CASE", "camelCase"]
					},
					{
						"selector": "classProperty",
						"format": ["camelCase"]
					},
					{
						"selector": "classProperty",
						"modifiers": ["static"],
						"format": ["UPPER_CASE"]
					},
					{
						"selector": "classProperty",
						"modifiers": ["readonly"],
						"format": ["UPPER_CASE", "PascalCase", "camelCase"]
					},
					{
						"selector": "classProperty",
						"modifiers": ["readonly"],
						"format": ["UPPER_CASE", "PascalCase"]
					},
					{
						"selector": "variable",
						"format": ["UPPER_CASE", "camelCase", "PascalCase"]
					},
					{
						"selector": ["enum", "interface", "class", "enumMember", "typeAlias"],
						"format": ["PascalCase"]
					},
					{
						"selector": ["enumMember"],
						"format": ["camelCase"]
					}
				],
				"@typescript-eslint/no-namespace": "off",
				"@typescript-eslint/no-non-null-assertion": "error",
				"@typescript-eslint/no-parameter-properties": "off",
				"@typescript-eslint/no-shadow": "error",
				"@typescript-eslint/no-unused-expressions": "error",
				"@typescript-eslint/no-use-before-define": "error",
				"@typescript-eslint/no-floating-promises": "warn",
				"@typescript-eslint/prefer-function-type": "error",
				"@typescript-eslint/explicit-module-boundary-types": "warn",
				"no-case-declarations": "off",
				"@typescript-eslint/unbound-method": [
					"error",
					{
						"ignoreStatic": true
					}
				],
				"@typescript-eslint/no-unsafe-call": "off",
				"@typescript-eslint/quotes": [
					"error",
					"single",
					{
						"avoidEscape": true
					}
				],
				"@typescript-eslint/semi": ["error", "always"],
				"@typescript-eslint/triple-slash-reference": [
					"error",
					{
						"path": "always",
						"types": "prefer-import",
						"lib": "always"
					}
				],
				"arrow-body-style": ["error", "as-needed"],
				"no-console": [
					"error",
					{
						"allow": ["warn", "error"]
					}
				],
				"prettier/prettier": [
					"error",
					{
						"usePrettierrc": true
					}
				]
			}
		},
		// NOTE: WE ARE NOT APPLYING PRETTIER IN THIS OVERRIDE, ONLY @ANGULAR-ESLINT/TEMPLATE
		{
			"files": ["*.html"],
			"extends": ["plugin:@angular-eslint/template/recommended"],
			"rules": {}
		},
		// NOTE: WE ARE NOT APPLYING @ANGULAR-ESLINT/TEMPLATE IN THIS OVERRIDE, ONLY PRETTIER
		{
			"files": ["*.html"],
			"excludedFiles": ["*inline-template-*.component.html"],
			"extends": ["plugin:prettier/recommended"],
			"rules": {
				// NOTE: WE ARE OVERRIDING THE DEFAULT CONFIG TO ALWAYS SET THE PARSER TO ANGULAR (SEE BELOW)
				"prettier/prettier": [
					"error",
					{
						"parser": "angular"
					}
				]
			}
		},
		{
			"files": ["*effects.ts", "effects*.ts", "*actions.ts"],
			"rules": {
				"use-decorator/use-decorator": "off"
			}
		},
		{
			// https://github.com/cartant/eslint-plugin-rxjs
			"files": ["*.ts"],
			"plugins": ["rxjs"],
			"extends": [],
			// "extends": ["plugin:rxjs/recommended"]
			"rules": {
				"rxjs/no-async-subscribe": "error",
				"rxjs/no-create": "error",
				"rxjs/no-ignored-notifier": "error",
				"rxjs/no-ignored-replay-buffer": "error",
				"rxjs/no-ignored-observable": "warn",
				"rxjs/no-implicit-any-catch": "off",
				"rxjs/no-index": "error",
				"rxjs/no-ignored-takewhile-value": "off",
				"rxjs/no-nested-subscribe": "warn",
				"rxjs/no-redundant-notify": "error",
				"rxjs/no-sharereplay": "error",
				"rxjs/no-subject-unsubscribe": "error",
				"rxjs/no-unbound-methods": "warn",
				"rxjs/no-unsafe-subject-next": "warn",
				"rxjs/no-unsafe-takeuntil": [
					"warn",
					{
						"alias": ["untilDestroyed"],
						"allow": ["repeat"]
					}
				],
				"rxjs/suffix-subjects": [
					"warn",
					{
						"parameters": true,
						"properties": true,
						"suffix": "$",
						"types": {
							"^EventEmitter$": false
						},
						"variables": true
					}
				],
				"rxjs/throw-error": "error"
			}
		}
	],
	"plugins": ["eslint-plugin-use-decorator"],
	"rules": {
		"use-decorator/use-decorator": [
			1,
			{
				"classProperty": [
					{
						"decorators": ["Input", "Output", "ViewChild", "ViewChildren"],
						"readonly": true
					}
				],
				"methodAccessModifiers": true,
				"classPropertyAccessModifiers": true
			}
		]
	}
}
